/* socket.js v0.1.4 */
var socketjs=function(){"use strict";var e=function(e){try{if("string"!=typeof JSON.stringify(e))return!1}catch(t){return!1}return!0};return{isSupported:function(){return"undefined"!=typeof WebSocket},connect:function(t,n){if(void 0!==t&&"string"!=typeof t)throw"Invalid parameter: host";if(void 0!==n&&"boolean"!=typeof n)throw"Invalid parameter: secure";if(!socketjs.isSupported())throw"WebSockets are not supported";var o=void 0===n?"https:"===location.protocol.toLowerCase():n,r=(o?"wss://":"ws://")+(void 0===t?window.location.host:t)+"/",i=null,a=!1,c=!1,s={},l=null,f=null,u=null,d=[],p=function(e){var t=new WebSocket(e);return t.onopen=h,t.onmessage=v,t.onclose=y,t},h=function(){if(c){c=!1,d.length>0&&d.splice(0,d.length);var t=null;if(null!==f&&(t=f(),void 0===t&&(t=null),!e(t)))throw"Invalid reconnectData";d.push({type:"reconnect",reconnectData:t})}m()},v=function(e){var t=JSON.parse(e.data);"message"===t.type?void 0!==s[t.messageType]&&s[t.messageType](t.message):"close"===t.type&&g()},y=function(){if(!a){c||(c=!0,null!==l&&l());var e=setInterval(function(){if(!a)try{i=p(r)}catch(t){return}clearInterval(e)},2e3)}},m=function(){if(a||c)d.length>0&&d.splice(0,d.length);else if(i.readyState===WebSocket.OPEN){for(var e=0;e<d.length;e+=1)i.send(JSON.stringify(d[e]));e>0&&d.splice(0,e)}},g=function(){a||(a=!0,i.readyState!==WebSocket.CLOSING&&i.readyState!==WebSocket.CLOSED&&i.close(),null!==u&&u())};return i=p(r),d.push({type:"connect"}),m(),{send:function(t,n){if("string"!=typeof t)throw"Invalid parameter: type";if(!e(n))throw"Invalid parameter: message";if(a)throw"Attempted to transmit after the connection has been closed";c||(d.push({type:"message",messageType:t,message:n}),m())},receive:function(e,t){if("string"!=typeof e)throw"Invalid parameter: type";if(null!==t&&"function"!=typeof t)throw"Invalid parameter: handler";if(a)throw"Attempted to set message handler after the connection has been closed";null===t?delete s[e]:s[e]=t},disconnect:function(e){if(null!==e&&"function"!=typeof e)throw"Invalid parameter: handler";if(a)throw"Attempted to set disconnect handler after the connection has been closed";l=e},reconnect:function(e){if(null!==e&&"function"!=typeof e)throw"Invalid parameter: handler";if(a)throw"Attempted to set reconnect handler after the connection has been closed";f=e},close:function(e){if(void 0!==e&&null!==e&&"function"!=typeof e)throw"Invalid parameter: handler";void 0===e?g():u=e}}}}}();"undefined"!=typeof module&&(module.exports=socketjs);
